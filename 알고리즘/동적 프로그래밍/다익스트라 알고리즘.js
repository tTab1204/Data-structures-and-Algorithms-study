// 다익스트라 알고리즘

// 다이나믹 프로그래밍을 활용한 대표적인 최단거리 알고리즘. - ex: 네비게이션, GPS 등

// 실행 순서

// 1. 모든 꼭지점을 미방문 상태로 만든다.
// 2. 시작 정점을 정한다(정점 A에서 탐색을 시작할 건지, B에서 시작할 건지 결정)
// 3. 시작정점 A를 방문상태로 처리한다.(시작 정점을 A라고 가정했을 때)
// 4. 정점 A에 인접한 정점으로 가는 모든 거리 값을 기록한다.
// 5. 정점 A에 각각의 인접 정점과 연결된 거리 중에서, 최단 거리를 갖는 정점을 찾는다.(최소 가중치 탐색)
// 5. 최단 거리를 가진 경로를 통해 다음 정점으로 이동한다.
// 6. 이동 거리를 기록한다.
// 7. 다음 정점을 B라고 가정하면, 정점 B에 인접한 정점으로 가는 모든 이동거리를 더한 값
// (B에 인접한 각 정점들의 가중치+이동거리)과 (5)에서 기록한 최단거리 값을 서로 비교한다.
// 이 때 최소 값을 갖는 거리를 기록한다.
// 9. 정점 B를 방문상태로 처리한다.
// 10. 모든 정점이 방문 상태가 될 때까지 (1)~(9)의 과정을 반복한다.

// 다익스트라 알고리즘의 원래 버전은 최소 힙을 사용하지 않기 때문에 O(N^2)이라는 시간 복잡도를 가진다.
// 이때 N은 꼭짓점의 개수이다.

// 그러나 최소 힙에 기반한 다익스트라 알고리즘의 시간 복잡도는
// O(변의 개수 + Nlog2(..작은 2)N)이다.

// 선형 탐색, 선형자료구조(배열)를 이용한 방식과 인접리스트와 최소 힙을 이용한 방식

let num = 6
let inf = 1000000000

// 전체 그래프를 초기화합니다.
for(let i = 0; i<num; i++) {
    for(let j = 0; i<num; i++) {
        
    }
}